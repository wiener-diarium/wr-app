---
import type { CollectionEntry } from "astro:content";

import FormatUrl from "../components/FormatUrl.astro";

type Props = CollectionEntry<"publications">["data"];

const {
	publicationUnstructured,
	title,
	authors,
	year,
	publishedIn,
	publishers,
	pubPlace,
	volume,
	pages,
	url,
	urldate,
} = Astro.props;

const stringifyAuthors = (authors: Props["authors"]) => {
	if (authors.length === 0) {
		return "";
	}
	return authors
		.map((author) => {
			if (!author) {
				return "";
			}
			return `${author.lastName}, ${author.firstName}${author.middleName ? " " + author.middleName : ""}`;
		})
		.join("; ");
};

const urlToHtml = (url: Props["url"]) => {
	if (!url) {
		return "";
	}
	return `<a href="${url}" target="_blank">
			${url}
		</a>`;
};

const urldateToHTml = (urldate: Props["urldate"]) => {
	if (!urldate) {
		return "";
	}
	return ` (Zugriff am ${urldate.toLocaleDateString("de-DE", {
		year: "numeric",
		month: "2-digit",
		day: "2-digit",
	})})`;
};

const createTemplate = (
	publicationUnstructured: Props["publicationUnstructured"],
	title: Props["title"],
	authors: Props["authors"],
	year: Props["year"],
	publishedIn: Props["publishedIn"],
	publishers: Props["publishers"],
	pubPlace: Props["pubPlace"],
	volume: Props["volume"],
	pages: Props["pages"],
	url: Props["url"],
	urldate: Props["urldate"],
) => {
	if (publicationUnstructured !== undefined) {
		return publicationUnstructured;
	}
	return stringifyAuthors(authors) + ":" + title + "." + publishedIn
		? `In: ${publishedIn}.`
		: String(publishers) + pubPlace
			? pubPlace + ":"
			: String(year)
				? year + "."
				: String(volume)
					? volume + "."
					: String(pages)
						? pages + "."
						: String(url)
							? urlToHtml(url)
							: String(urldate)
								? urldateToHTml(urldate)
								: "";
};
---

<li class="p-2">
	{
		createTemplate(
			publicationUnstructured,
			title,
			authors,
			year,
			publishedIn,
			publishers,
			pubPlace,
			volume,
			pages,
			url,
			urldate,
		)
	}
	<FormatUrl url={url} />
</li>
