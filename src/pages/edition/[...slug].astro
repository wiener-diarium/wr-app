---
import { readdir, readFile } from "node:fs/promises";

//import { getCollection } from "astro:content";
import Edition from "../../layouts/Edition.astro";
import PageContent from "../../layouts/PageContent.astro";
import { baseurl } from "../../lib/baseurl.js";

export async function getStaticPaths() {
	const entries = await readdir("edition", { withFileTypes: true });
	const about = await readFile("edition/about.json", "utf-8");
	const editions = JSON.parse(about);
	return entries
		.filter((entry) => entry.isFile() && entry.name.endsWith(".html"))
		.map((entry) => ({
			params: { slug: entry.name.replace(/\.html$/, "") },
			props: {
				html: readFile(`edition/${entry.name}`, "utf-8"),
				date: new Date(entry.name.replace(/\.html$/, "").replace("wr_", "")),
				issue:
					editions[
						(() => {
							const name = entry.name.replace(/\.html$/, "");
							return name.startsWith("wr_") ? name : `edoc_wd_${name}`;
						})()
					].title,
				corpus:
					editions[
						(() => {
							const name = entry.name.replace(/\.html$/, "");
							return name.startsWith("wr_") ? name : `edoc_wd_${name}`;
						})()
					].corpus,
				name: entry.name,
			},
		}));
}

// type ed = Array<edition>;

// interface edition {
// 	id: string;
// 	title: string;
// 	corpus: string;
// 	html: string;
// }

// export async function getStaticPaths() {
// 	const about = await readFile("edition/new_about.json", "utf-8");
// 	const editions: ed = JSON.parse(about);
// 	return editions.map((edition) => ({
// 		params: { slug: edition.id },
// 		props: {
// 			html: edition.html,
// 			date: new Date(edition.id.replace("wr_", "")),
// 			issue: edition.title,
// 			corpus: edition.corpus,
// 			name: edition.id.startsWith("wr_") ? edition.id : `edoc_wd_${edition.id}`,
// 		},
// 	}));
// }

const { html, date, issue, corpus, name } = Astro.props;
---

<style is:global>
	.text.basis-full {
		max-width: 1200px !important;
		margin: 0 auto !important;
	}
</style>
<Edition title={issue} baseurl={baseurl} date={date} issue={issue} corpus={corpus} name={name}>
	<div class="flex flex-col">
		<PageContent classNames={["container", "mb-auto"]}>
			<div set:html={html} class="font-antiqua" />
		</PageContent>
	</div>
</Edition>
