---
import PageFullWidth from "../layouts/PageFullWidth.astro";

const baseurl = import.meta.env.BASE_URL ? import.meta.env.BASE_URL : "";
---

<link
	rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/instantsearch.css@7/themes/algolia-min.css"
/>
<PageFullWidth title="Volltextsuche" baseurl={baseurl}>
	<div class="my-8">
		<div class="container mx-auto max-w-[800px] px-5 py-4 align-middle">
			<div class="px-4 text-center">
				<h4 class="pt-2">Volltextsuche</h4>
				<div id="searchbox" class="w-full" style="margin: 0 auto;"></div>
				<div class="flex flex-col items-center p-4" id="current-refinements"></div>
			</div>
			<div class="px-4">
				<h5 class="py-2">Jahrgänge</h5>
				<div id="refinement-range-year"></div>
			</div>
			<!-- <div class="px-4">
				<h5 class="py-2">OCR KI Sicherheit</h5>
				<div id="refinement-range-confidence"></div>
			</div> -->
		</div>
		<div class="mt-12 flex flex-row p-4 sm:flex-col md:flex-col">
			<div class="basis-1/6 rounded border border-cyan-500 px-4">
				<div class="py-2 text-center" id="clear-refinements"></div>
				<div id="menu-edition"></div>
				<div id="corrections"></div>
				<div id="weekday"></div>
				<div id="decade"></div>
				<div id="refinement-list-places" class="hidemobile"></div>
				<div id="refinement-list-keywords" class="hidemobile pb-4"></div>
			</div>
			<div class="basis-5/6 px-4">
				<div class="grid grid-cols-3">
					<div>
						<h5 class="pt-2">Sortierung</h5>
						<div id="sort-by"></div>
					</div>
					<div>
						<div id="pagination0"></div>
					</div>
				</div>
				<div class="mb-4 text-center" id="stats-container"></div>
				<div id="hits"></div>
				<div class="mt-8" id="pagination"></div>
			</div>
		</div>
	</div>
</PageFullWidth>
<script>
	import instantsearch from "instantsearch.js";
	import {
		searchBox,
		hits,
		pagination,
		refinementList,
		menu,
		stats,
		sortBy,
		configure,
		rangeInput,
		clearRefinements,
		currentRefinements,
		panel,
	} from "instantsearch.js/es/widgets";
	import TypesenseInstantSearchAdapter from "typesense-instantsearch-adapter";

	var project_collection_name = "gestrich_index";
	const annoUrl = "https://anno.onb.ac.at/cgi-content/anno?aid=wrz&datum=";
	const annoImgUrl = "https://anno.onb.ac.at/cgi-content/annoshow?call=wrz|";
	const acdhIIIF = "https://iiif.acdh.oeaw.ac.at/iiif/images/digitarium/";
	const baseurl = import.meta.env.BASE_URL ? import.meta.env.BASE_URL : "";

	function weekdayToString(weekday: any) {
		switch (parseInt(weekday.label)) {
			case 0:
				return "Montag";
			case 1:
				return "Dienstag";
			case 2:
				return "Mittwoch";
			case 3:
				return "Donnerstag";
			case 4:
				return "Freitag";
			case 5:
				return "Samstag";
			case 6:
				return "Sonntag";
		}
	}

	function makeAnnoLink(hit: any) {
		let hitDate = hit.day;
		let hitPage = hit.page;
		let hitDigit = hit.digitarium_issue;
		let hidId = hit.id;
		let hitGestrich = hit.gestrich;
		let hitString = hit._snippetResult?.full_text.matchedWords.join("+");
		if (hitDigit) {
			let wr_app_id = hidId.split("__")[0].replace("wr_", "");
			return `${baseurl}edition/${wr_app_id}?img=on&mark=${hitString}`;
		} else if (hitGestrich) {
			let wr_app_id = hidId.split("__")[0];
			return `${baseurl}edition/${wr_app_id}?img=on&mark=${hitString}`;
		} else {
			return `${annoUrl}${hitDate}&seite=${hitPage}`;
		}
	}
	function makeAnnoImgUrl(hit: any) {
		let hitDate = hit.day;
		let hitPage = hit.page;
		return `${annoImgUrl}${hitDate}|${hitPage}|10.0|0`;
	}
	function makeDigitImgUrl(hit: any) {
		// let part1 = `${date.slice(0, 3)}x`;
		// let part2 = date.slice(0, 4);
		// let part3 = date.slice(4, 6);
		// let part4 = date;
		// let part5 = `${date}-000`;
		// let part6 = "full/full/0/default.jpg";
		// return `${digitUrl}${part1}/${part2}/${part3}/${part4}/${part5}/${part6}`;
		let hitDate = hit.day;
		let hitPage = String(Number(hit.page) - 1);
		let hitPageTrailingZeros = hitPage.padStart(3, "0");
		return `${acdhIIIF}${hitDate}-${hitPageTrailingZeros}.jp2/full/400,/0/default.jpg`;
	}
	function whichEdition(hit: any) {
		let hitday = String(hit.day);
		if (hitday.startsWith("1703")) {
			return makeDigitImgUrl(hit);
		} else {
			return makeAnnoImgUrl(hit);
		}
	}
	function makeTitle(hit: any) {
		let hitDigit = hit.digitarium_issue;
		let hitGestrich = hit.gestrich;
		var title = hit.title;
		if (hitDigit) {
			var title = hit.title.split(", ")[0];
		} else if (hitGestrich) {
			var title = hit.title.split(", ")[2];
		}
		return title;
	}
	function makeCorrections(items: any, label = false) {
		if (label) {
			var hitCorrections = items.label;
		} else {
			var hitCorrections = items.corrections;
		}
		if (hitCorrections == "0") {
			return "unüberprüft";
		} else if (hitCorrections == "1") {
			return "einmal überprüft";
		} else if (hitCorrections == "2") {
			return "zweimal überprüft";
		} else if (hitCorrections == "3") {
			return "mehrfach überprüft";
		} else {
			return hitCorrections;
		}
	}
	const typesenseInstantsearchAdapter = new TypesenseInstantSearchAdapter({
		server: {
			apiKey: "jgQAkG16CRrqpASNqV0Zn8xUNtZ5nq96",
			nodes: [
				{
					host: "typesense.acdh-dev.oeaw.ac.at",
					port: 443,
					protocol: "https",
				},
			],
		},
		additionalSearchParameters: {
			query_by: "full_text,extra_full_text",
		},
	});

	const searchClient = typesenseInstantsearchAdapter.searchClient;
	const search = instantsearch({
		searchClient,
		indexName: project_collection_name,
		routing: true,
	});

	search.addWidgets([
		searchBox({
			container: "#searchbox",
			autofocus: true,
			cssClasses: {
				form: "form-inline",
				input: "form-control",
				submit: "btn",
				reset: "btn",
			},
		}),

		hits({
			container: "#hits",
			cssClasses: {
				item: "border-light rounded hover-shadow hover:bg-cyan-50 w-[32%] xl:w-[48%] md:w-[47%] sm:w-[98%] lg:w-[46%] m-2 p-2",
			},
			templates: {
				empty(results, { html }) {
					return html`No results for <q>${results.query}</q>`;
				},
				item(hit, { html, components }) {
					return html`
						<a
							class="text-decoration-none text-dark"
							href="${makeAnnoLink(hit)}"
							aria-label="Link zu Dokument: ${hit.title}"
						>
							<div class="flex flex-row">
								<div>
									<h5
										class=${
											// @ts-expect-error
											hit._snippetResult?.full_text.matchedWords.length > 0
												? "pb-4 font-semibold"
												: ""
										}
									>
										${
											// @ts-expect-error
											hit._snippetResult?.full_text.matchedWords.length > 0
												? "Schlagworte im Kontext:"
												: ""
										}
									</h5>
									<p
										class=${
											// @ts-expect-error
											hit._snippetResult?.full_text.matchedWords.length > 0 ? "pb-4" : ""
										}
									>
										${
											// @ts-expect-error
											hit._snippetResult?.full_text.matchedWords.length > 0
												? components.Snippet({ hit, attribute: "full_text" })
												: ""
										}
									</p>
								</div>
							</div>
							<div class="flex flex-row">
								<div
									class="basis-4/12 self-center mx-2 p-1 border-2 rounded ${makeCorrections(hit) ==
									"unüberprüft"
										? "border-black-200"
										: makeCorrections(hit) == "einmal überprüft"
											? "border-cyan-100"
											: makeCorrections(hit) == "zweimal überprüft"
												? "border-cyan-500"
												: makeCorrections(hit) == "mehrfach überprüft"
													? "border-cyan-700"
													: ""}"
								>
									<img src="${whichEdition(hit)}" class="img-thumbnail" alt="Bild" />
								</div>
								<div class="basis-8/12">
									<table>
										<tr>
											<td><em>Ausgabe:</em></td>
											<td class="px-2">${makeTitle(hit)}</td>
										</tr>
										<tr>
											<td><em>Seite:</em></td>
											<td class="px-2">${hit.page}</td>
										</tr>
										<tr>
											<td><em>Datum:</em></td>
											<td class="px-2">
												${new Date(hit.id.replace("wr_", "").split("__")[0]).toLocaleDateString(
													"de-De",
													{
														year: "numeric",
														month: "long",
														day: "numeric",
													},
												)}
											</td>
										</tr>
										<tr>
											<td><em>Edition:</em></td>
											<td class="px-2">${hit.edition[0]}</td>
										</tr>
										<tr>
											<td><em>Status:</em></td>
											<td class="px-2">${makeCorrections(hit)}</td>
										</tr>
										${hit.confidence
											? html`
													<tr>
														<td><em>OCR KI Sicherheit:</em></td>
														<td class="px-2">${hit.confidence.toFixed(3)}</td>
													</tr>
												`
											: ""}
									</table>
								</div>
							</div>
						</a>
					`;
				},
			},
		}),

		pagination({
			container: "#pagination",
		}),

		panel({
			collapsed: ({ state }) => {
				return state.query.length === 0;
			},
			templates: {
				header: "Sammlung wählen",
			},
		})(menu)({
			container: "#menu-edition",
			attribute: "edition",
			cssClasses: {
				list: "list-unstyled",
				item: "flex align-items-start text-left",
				label: "flex align-items-start text-left",
			},
		}),

		stats({
			container: "#stats-container",
			templates: {
				text(data, { html }) {
					return html` <div>${data.nbHits} Treffer gefunden in ${data.processingTimeMS}ms</div> `;
				},
			},
		}),

		panel({
			collapsed: ({ state }) => {
				return state.query.length === 0;
			},
			templates: {
				header: "Status <br/> (automatisch erstellter Text)",
			},
		})(refinementList)({
			container: "#corrections",
			attribute: "corrections",
			searchable: false,
			transformItems(items) {
				return items.map((item) => ({
					...item,
					highlighted: (item.highlighted = makeCorrections(item, true)),
				}));
			},
			cssClasses: {
				searchableInput: "form-control form-control-sm m-2 border-light-2",
				searchableSubmit: "none",
				searchableReset: "none",
				showMore: "btn btn-sm align-content-center",
				list: "list-unstyled",
				count: "badge flex m-2y hideme",
				label: "flex text-left p-2",
				checkbox: "m-2",
			},
		}),

		panel({
			collapsed: ({ state }) => {
				return state.query.length === 0;
			},
			templates: {
				header: "Wochentag",
			},
		})(refinementList)({
			container: "#weekday",
			attribute: "weekday",
			searchable: false,
			sortBy: ["isRefined", "name:asc"],
			transformItems(items) {
				return items.map((item) => ({
					...item,
					highlighted: (item.highlighted = weekdayToString(item)),
				}));
			},
			cssClasses: {
				searchableInput: "form-control form-control-sm m-2 border-light-2",
				searchableSubmit: "d-none",
				searchableReset: "d-none",
				showMore: "btn btn-secondary btn-sm align-content-center",
				list: "list-unstyled",
				count: "badge flex align-self-end m-2 badge-secondary hideme ",
				label: "flex align-items-start text-left",
				checkbox: "m-2",
			},
		}),

		panel({
			collapsed: ({ state }) => {
				return state.query.length === 0;
			},
			templates: {
				header: "Jahrzehnt",
			},
		})(refinementList)({
			container: "#decade",
			attribute: "decade",
			searchable: false,
			sortBy: ["isRefined", "name:asc"],
			limit: 10,
			// transformItems(items) {
			// 	return items.map((item) => ({
			// 		...item,
			// 		highlighted: (item.highlighted = yearToDecade(item)),
			// 	}));
			// },
			cssClasses: {
				searchableInput: "form-control form-control-sm m-2 border-light-2",
				searchableSubmit: "d-none",
				searchableReset: "d-none",
				showMore: "btn btn-secondary btn-sm align-content-center",
				list: "list-unstyled",
				count: "badge flex align-self-end m-2 badge-secondary hideme ",
				label: "flex align-items-start text-left",
				checkbox: "m-2",
			},
		}),

		panel({
			collapsed: ({ state }) => {
				return state.query.length === 0;
			},
			templates: {
				header: "Schlagworte",
			},
			// hidden(options) {
			// 	return options.results.nbHits === 0;
			// },
		})(refinementList)({
			container: "#refinement-list-keywords",
			attribute: "keywords",
			searchable: true,
			searchablePlaceholder: "Suchen",
			showMore: true,
			searchableIsAlwaysActive: false,
			sortBy: ["isRefined", "name:asc"],
			showMoreLimit: 9999,
			templates: {
				showMoreText({ isShowingMore }) {
					return isShowingMore ? "Weniger anzeigen" : "Mehr anzeigen";
				},
				searchableNoResults() {
					return "Keine Ergebnisse gefunden ";
				},
			},
			cssClasses: {
				searchableInput: "form-control form-control-sm border-light-2",
				searchableSubmit: "d-none",
				searchableReset: "d-none",
				showMore: "btn btn-secondary btn-sm align-content-center",
				list: "list-unstyled",
				count: "badge flex align-self-end m-2 badge-secondary hideme",
				label: "flex align-items-start text-left",
				checkbox: "m-2",
			},
		}),

		panel({
			collapsed: ({ state }) => {
				return state.query.length === 0;
			},
			templates: {
				header: "Orte",
			},
			// hidden(options) {
			// 	return options.results.nbHits === 0;
			// },
		})(refinementList)({
			container: "#refinement-list-places",
			attribute: "places",
			searchable: true,
			showMore: true,
			sortBy: ["isRefined", "name:asc"],
			showMoreLimit: 9999,
			searchableIsAlwaysActive: false,
			templates: {
				showMoreText({ isShowingMore }) {
					return isShowingMore ? "Weniger anzeigen" : "Mehr anzeigen";
				},
				searchableNoResults() {
					return "Keine Ergebnisse gefunden ";
				},
			},
			cssClasses: {
				searchableInput: "form-control form-control-sm border-light-2",
				searchableSubmit: "d-none",
				searchableReset: "d-none",
				showMore: "btn btn-secondary btn-sm align-content-center",
				list: "list-unstyled",
				count: "badge flex align-self-end m-2 badge-secondary hideme",
				label: "flex align-items-start text-left",
				checkbox: "m-2",
			},
		}),

		rangeInput({
			container: "#refinement-range-year",
			attribute: "year",
			templates: {
				separatorText: "bis",
				submitText: "Suchen",
				// separatorText({ cssClasses }, { html }) {
				// 	return html`<span class="${cssClasses.separator}">bis</span>`;
				// },
				// submitText({ cssClasses }, { html }) {
				// 	return html`<span class="${cssClasses.submit}">Suchen</span>`;
				// },
			},
			cssClasses: {
				form: "form-inline",
				input: "form-control",
				submit: "btn",
			},
		}),

		pagination({
			container: "#pagination",
			padding: 2,
			cssClasses: {
				list: "pagination my-4",
				item: "page-item",
				link: "page-link",
			},
		}),

		pagination({
			container: "#pagination0",
			padding: 2,
			cssClasses: {
				list: "pagination my-4",
				item: "page-item",
				link: "page-link",
			},
		}),

		clearRefinements({
			container: "#clear-refinements",
			templates: {
				resetLabel({ hasRefinements }, { html }) {
					return html`<span
						>${hasRefinements ? "Filter zurücksetzen" : "Keine Filter ausgewählt"}</span
					>`;
				},
			},
			cssClasses: {
				button: "btn",
			},
		}),

		currentRefinements({
			container: "#current-refinements",
			cssClasses: {
				delete: "btn",
				label: "badge",
			},
		}),

		sortBy({
			container: "#sort-by",
			items: [
				{
					label: "---",
					value: "gestrich_index",
				},
				{
					label: "Jahr (aufsteigend)",
					value: "gestrich_index/sort/day:asc,page:asc",
				},
				{
					label: "Jahr (absteigend)",
					value: "gestrich_index/sort/day:desc,page:asc",
				},
			],
		}),

		configure({
			hitsPerPage: 20,
			attributesToSnippet: ["full_text"],
		}),
	]);

	search.start();
</script>
